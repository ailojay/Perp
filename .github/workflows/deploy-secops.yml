name: 'Terraform Plan for SecOps'

on:
  push:
    branches: [test/**]  # Only run on test branches
  pull_request:
    branches: [main]     # Run on PRs targeting main

permissions:
  id-token: write
  contents: read

env:
  TF_WORKING_DIR: './environments/secops'

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    if: github.event_name == 'push'  # Only run plan on push to test branches

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.SECOPS_DEPLOY_ROLE_ARN }}
          role-session-name: GitHubActions-SecOps-Plan

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Validate
        run: terraform validate -no-color
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Format Check
        run: terraform fmt -check
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Plan
        run: terraform plan -no-color -out=tfplan
        working-directory: ${{ env.TF_WORKING_DIR }}

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    needs: terraform-plan

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.SECOPS_DEPLOY_ROLE_ARN }}
          role-session-name: GitHubActions-SecOps-Apply

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Apply
        run: terraform apply -no-color -auto-approve tfplan
        working-directory: ${{ env.TF_WORKING_DIR }}